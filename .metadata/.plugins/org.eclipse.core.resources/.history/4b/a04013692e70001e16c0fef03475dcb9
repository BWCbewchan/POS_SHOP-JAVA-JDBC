package entity;

import java.time.LocalDate;
import java.time.Period;

public class NhanVien {
    private String maNV;
    private String tenNV;
    private LocalDate ngaySinh;
    private String SDT;
    private String email;
    private String CMND;
    private boolean gioiTinh;
    private String diaChi;
    private boolean chucVu;
    private int trangThai;
    private double luong;

    public NhanVien() {
        // Constructor mặc nhiên
    }

    public NhanVien(String maNV, String tenNV, LocalDate ngaySinh, String SDT, String email, String CMND, boolean gioiTinh, String diaChi, boolean chucVu, int trangThai, double luong) {
        setMaNV(maNV);
        setTenNV(tenNV);
        setNgaySinh(ngaySinh);
        setSDT(SDT);
        setEmail(email);
        setCMND(CMND);
        setGioiTinh(gioiTinh);
        setDiaChi(diaChi);
        setChucVu(chucVu);
        setTrangThai(trangThai);
        setLuong(luong);
    }

    // Copy constructor
    public NhanVien(NhanVien other) {
        this(other.maNV, other.tenNV, other.ngaySinh, other.SDT, other.email, other.CMND, other.gioiTinh, other.diaChi, other.chucVu, other.trangThai, other.luong);
    }

    public String getMaNV() {
        return maNV;
    }

    public void setMaNV(String maNV) {
        // Kiểm tra và xử lý logic tạo mã NV theo quy luật
        // Phát sinh tự động
    }

    public String getTenNV() {
        return tenNV;
    }

    public void setTenNV(String tenNV) {
        if (tenNV != null && tenNV.matches("^[A-Z][a-zA-Z ]{2,}$")) {
            this.tenNV = tenNV;
        } else {
            throw new IllegalArgumentException("Họ tên không hợp lệ");
        }
    }

    public LocalDate getNgaySinh() {
        return ngaySinh;
    }

    public void setNgaySinh(LocalDate ngaySinh) {
        LocalDate currentDate = LocalDate.now();
        int age = Period.between(ngaySinh, currentDate).getYears();

        if (age >= 18) {
            this.ngaySinh = ngaySinh;
        } else {
            throw new IllegalArgumentException("Nhân viên phải >= 18 tuổi");
        }
    }

    public String getSDT() {
        return SDT;
    }

    public void setSDT(String SDT) {
        if (SDT != null && SDT.matches("0[0-9]{9}")) {
            this.SDT = SDT;
        } else {
            throw new IllegalArgumentException("Số điện thoại không hợp lệ");
        }
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        if (isValidEmail(email)) {
            this.email = email;
        } else {
            throw new IllegalArgumentException("Email không hợp lệ");
        }
    }

    private boolean isValidEmail(String email) {
        // Kiểm tra địa chỉ email theo yêu cầu
        if (email != null && email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")) {
            return true;
        }
        return false;
    }

    public String getCMND() {
        return CMND;
    }

    public void setCMND(String CMND) {
        // Kiểm tra và xử lý logic CMND
        // Throw exception nếu CMND không hợp lệ
    }

    public boolean isGioiTinh() {
        return gioiTinh;
    }

    public void setGioiTinh(boolean gioiTinh) {
        if (gioiTinh != true) {
            this.gioiTinh = gioiTinh;
        } else {
            throw new IllegalArgumentException("Nếu gioiTinh = true thì trả về Nam, ngược lại trả về Nữ");
        }
    }

    public String getDiaChi() {
        return diaChi;
    }

    public void setDiaChi(String diaChi) {
        if (diaChi != null) {
            this.diaChi = diaChi;
        } else {
            throw new IllegalArgumentException("Địa chỉ không được rỗng");
        }
    }

    public boolean isChucVu() {
        return chucVu;
    }

    public void setChucVu(boolean chucVu) {
        if (chucVu != true) {
            this.chucVu = chucVu;
        } else {
            throw new IllegalArgumentException("Nếu chucVu = true thì trả về Nhân viên, ngược lại trả về Quản lý");
        }
    }

    public int getTrangThai() {
        return trangThai;
    }

    public void setTrangThai(int trangThai) {
        // Kiểm tra và xử lý logic trangThai
        // Throw exception nếu trangThai không hợp lệ
    }

    public double getLuong() {
        return luong;
    }

    public void setLuong(double luong) {
        if (luong > 0) {
            this.luong = luong;
        } else {
            throw new IllegalArgumentException("Lương nhân viên phải lớn hơn 0");
        }
    }

    @Override
    public String toString() {
        return "NhanVien [maNV=" + maNV + ", tenNV=" + tenNV + ", ngaySinh=" + ngaySinh + ", SDT=" + SDT + ", email=" + email + ", CMND=" + CMND + ", gioiTinh=" + gioiTinh + ", diaChi=" + diaChi + ", chucVu=" + chucVu + ", trangThai=" + trangThai + ", luong=" + luong + "]";
    }
}
